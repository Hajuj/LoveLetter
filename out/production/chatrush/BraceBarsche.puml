@startuml
'https://plantuml.com/class-diagram

class Client
class ClientApplication
class ClientGuiController
class ClientGuiModel
class Connection
class ConsoleHelper
class MessageType
class Message
class Server
class Handler
class GuiSocketThread
class Thread
interface Serializable
interface Closeable

Server +-- Handler
ClientGuiController +-- GuiSocketThread
GuiSocketThread <|-- SocketThread: extends
Client <|-- Thread: extends
Client +-- SocketThread
Serializable ..> Message: implements
Closeable ..> Connection: implements
Message --> MessageType: MessageType
ClientApplication .. ClientGuiController
ClientGuiController ..> ClientGuiModel
Connection ..> Socket
Client ..> Connection





class ClientApplication {
- userName: String();
- messages: TextArea();
- loginButton: Button();
- nameField: TextField();
- users: TextArea();
- yourNameLabel: Label();
- usersOnlineLabel: Label();
- messageField: TextField();
- sendButton: Button();
- errorLabel: Label();
- primaryStage: Stage();

- controller: ClientGuiController;

+ {static} main(args: String[]);
+ refreshMessages: void;
+ refreshUsers: void;
+ notifyConnectionStatusChanged(boolean clientConnected): void;
+ start(Stage stage): void;
+ handle(Event event): void;
+ getUserName: String;
+ getPrimaryStage: Stage;
+ setPrimaryStage(Stage primaryStage): void;
}

class ClientGuiController {
+ ClientGuiController(ClientApplication application);
+ run(): void;
# getSocketThread(): SocketThread;
# getModel(): ClientGuiModel;
# getServerAddress(): String;
# getServerPort(): 500;
# getUserName(): String;
# sendTextMessage(String text): void;
}

class GuiSocketThread {
# processIncomingMessage(String message): void;
# informAboutAddingNewUser(String userName): void;
# informAboutDeletingNewUser(String userName): void;
# notifyConnectionStatusChanged(boolean clientConnected): void;
}


class ClientGuiModel {
+ allUserNames: Set<String> / new TreeSet<>();
+ getAllUserNames(): Set<String>;
+ setNewMessage(String newMessage): void
+ addUser(String newUserName): void
+ deleteUser(String userName): void
}

class Client {
# Connection
- clientConnected: boolean
# sendTextMessage(String text): void
+ run() : void
# getServerAddress(): String
# getServerPort(): int
# getSocketThread(): SocketThread
# shouldSendTextFromConsole(): boolean
}


class SocketThread {
+ run(): void
# clientHandshake(): void
# clientMainLoop(): void
# processIncomingMessage(String message): void
# informAboutAddingNewUser(String userName): void
# informAboutDeletingNewUser(String userName): void
# notifyConnectionStatusChanged(boolean clientConnected):void
}

class Connection {
+ socket: Socket {readOnly};
+ in: ObjectInputStream {readOnly};
+ out: ObjectOutputStream {readOnly};

+ Connection(Socket socket);
+ send(Message message): void;
+ receive(): Message;
+ close(): void
+ getRemoteSocketAddress(): SocketAddress;
}

class ConsoleHelper {
+ bis: BufferedReader(InputStreamReader(System.in));
+ writeMessage(String message): void
+ readString(): String;
+ readInt(): int;
}

class Message {
- type: MessageType;
- data: String;

+ Message(MessageType type);
+ Message((MessageType type, String data);
+ getData(): String;
+ getType(): MessageType;
}


enum MessageType {
    NAME_REQUEST,
    USER_NAME,
    NAME_ACCEPTED,
    TEXT,
    USER_ADDED,
    USER_REMOVED
}

class Server {
port: int;
+ {static} main(String[] args);
+ {static} sendBroadcastMessage (Message message): void
+ {static} sendBroadcastMessageExceptUser (Message message, Connection userconnection): void
+ {static} sendDirectMessage (Message message, Connection userconnection): void
- serverHandshake(Connection connection): String
- notifyUsers(Connection connection, String userName): void
- serverMainLoop (Connection connection, String userName): void
}

class Handler{
+ run(): void
- serverHandshake(Connection connection): String
}

@enduml